const request = require('supertest');
const { Movie } = require('../../models/movie');
const { Genre } = require('../../models/genre');
const { User } = require('../../models/user');
const winston = require('winston');

const mongoose = require('mongoose');

describe('/api/movies', () => {
  let server;
  let token;
  let genre;
  let genreId;
  let title;
  let movieId;
  let movie;

  beforeEach(async() => { 
      server = require('../../app');
      token = new User().generateAuthToken();
      genreId = mongoose.Types.ObjectId();
      

      genre = new Genre({
        name: 'abcde',
        id: genreId
      })
      
      await genre.save();
      genreId = genre._id;

      title = '12345'
   });

  afterEach(async () => { 
    await server.close();
    await Genre.remove({});
  });

  describe('POST /', () => {

    // HOW EXACTLY DOES BEFOREEACH WORK?

    const exec = () => {
      return request(server)
        .post('/api/movies')
        .set('x-auth-token', token)
        .send({
          title: title,
          genreId: genreId,
          genreName: genre.name,
          numberInStock: 2,
          dailyRentalRate: 2
        })
    };
    it('should return 401 if no token is provided', async () => {
      token = '';
      const res = await exec();
      expect(res.status).toBe(401);
      // expect(res).toBe(1);
    });

    it('should return 400 if an invalid token is provided', async () => {
      token = 1;
      const res = await exec();
      expect(res.status).toBe(400);
    });

    it('should return 400 if movie title is less than 5 characters', async () => {
      title = '1234'
      const res = await exec();
      expect(res.status).toBe(400);
    });

    it('should return 418 if genre ID is valid but does not exist', async () => {
      winston.info('GENREID GOING   INTO 418 TEST: ' + genreId)
      genreId = mongoose.Types.ObjectId();
      winston.info("GENREID GENERATED BY 418 TEST: " + genreId);
      const res = await exec();
      expect(res.status).toBe(418);
    });

    it('should return the movie', async () => {
      
      const res = await exec();
      expect(res.status).toBe(200);
      // expect(res.body).toHaveProperty('title', title);
      // expect(res.body).toHaveProperty('numberInStock', 2);
      // expect(res.body).toHaveProperty('dailyRentalRate', 2);
    });
  });

  describe('GET /', () => {

    beforeEach(()=> {
      Movie.collection.insertMany([
        { title: '12345',
          genre: {
            _id: mongoose.Types.ObjectId(),
            name: 'abcde'
          },
          numberInStock: 2,
          dailyRentalRate: 2
        },
        {
          title: '56789',
          genre: {
            _id: mongoose.Types.ObjectId(),
            name: 'rstuv'
          },
          numberInStock: 2,
          dailyRentalRate: 2
        },
      ]);
    });

    afterEach(()=> {

    });

    const exec = () => {
      return request(server)
        .get('/api/movies')
        .set('x-auth-token', token)
        .send();
    };

    it('should return 401 if no token is provided', async () => {
      token = '';
      const res = await exec();
      expect(res.status).toBe(401);
    });

    it('should return 400 if invalid token is provided', async () => {
      token = 1;
      const res = await exec();
      expect(res.status).toBe(400);
    });

    it('should return 200 if a valid token is provided', async () => {
      const res = await exec();
      expect(res.status).toBe(200);
    });

    it('should return all the movies if a valid token is provided', async () => {
      const res = await exec();
      expect(res.body.some(m => m.title === '12345')).toBeTruthy();
      expect(res.body.some(m => m.title === '56789')).toBeTruthy();
      expect(res.body.some(m => m.genre.name === 'abcde')).toBeTruthy();
    })

  });

  // TO DO: VALIDATE FUNCTIONS IN BOTH ROUTES AND MODEL FILE.

  describe('PUT /: id', () => {
    let newTitle;
  
    beforeEach(async () => {
      movie = new Movie({
        title: '12345',
        genre: {
          _id: genre._id,
          name: genre.name
        },
        numberInStock: 2,
        dailyRentalRate: 2
      });
      
      await movie.save();
      movieId = movie._id
      newTitle = 'new title';
      token = new User().generateAuthToken();
    })

    const exec = () => {
      return request(server)
        .put('/api/movies/' + movieId)
        .set('x-auth-token', token)
        .send({ title: newTitle });
    };

    it('should return 400 if invalid movie title is provided', async () => {
      newTitle = '1234';
      const res = await exec();
      expect(res.status).toBe(400);
    });

    it('should return 404 if invalid movieId is provided', async () => {
      movieId = mongoose.Types.ObjectId();
      const res = await exec();
      expect(res.status).toBe(404);
    });

    it('should return 200 if valid movieId is provided', async () => {
      const res = await exec();
      expect(res.status).toBe(200);
    });
  });

  describe("DELETE /", () => {
    
    beforeEach(async() => {
      movie = new Movie({
        title: '12345',
        genre: {
          _id: genre._id,
          name: genre.name
        },
        numberInStock: 2,
        dailyRentalRate: 2
      });
      movieId = movie._id
      await movie.save();
      
    })
    
    const exec = () => {
      return request(server)
        .delete('/api/movies/' + movieId)
        .set('x-auth-token', token)
        .send();
    };

    it('should return 401 if no token is provided', async () => {
      token = '';
      const res = await exec()
      expect(res.status).toBe(401);
    });

    it('should return 400 if invalid token is provided', async () => {
      token = 1;
      const res = await exec()
      expect(res.status).toBe(400);
    });

    it('should return 400 if wrong movieId is provided', async () => {
      movieId = mongoose.Types.ObjectId();
      const res = await exec()
      expect(res.status).toBe(400);
    });
  })
});


  